import React, { useState, useEffect, useRef } from 'react'; import { View, StyleSheet, ScrollView, Platform } from 'react-native'; import { TextInput, Button, Text, Portal, Modal } from 'react-native-paper'; import { CameraView, Camera } from 'expo-camera'; type TransactionData = { item: string; quantity: string; unitPrice: string; totalPrice: string; description: string; }; let Html5QrcodeScanner: any; if (Platform.OS === 'web') { import('html5-qrcode').then((module) => { Html5QrcodeScanner = module.Html5QrcodeScanner; }); } export default function TransactionsScreen() { const [hasPermission, setHasPermission] = useState<boolean | null>(null); const [showScanner, setShowScanner] = useState(false); const [activeTab, setActiveTab] = useState<'inflow' | 'outflow'>('inflow'); const [scanned, setScanned] = useState(false); const scannerRef = useRef<any>(null); const [formData, setFormData] = useState<TransactionData>({ item: '', quantity: '', unitPrice: '', totalPrice: '', description: '', }); useEffect(() => { return () => { if (Platform.OS === 'web' && scannerRef.current) { scannerRef.current.clear(); } }; }, []); const requestCameraPermission = async () => { if (Platform.OS === 'web') { setShowScanner(true); return; } const { status } = await Camera.requestCameraPermissionsAsync(); setHasPermission(status === 'granted'); if (status === 'granted') { setShowScanner(true); } }; const handleBarCodeScanned = ({ data }: { data: string }) => { try { const scannedData = JSON.parse(data); setFormData(scannedData); setShowScanner(false); } catch (error) { console.error('Invalid QR code data:', error); } }; const handleSubmit = async () => { try { const endpoint = activeTab === 'inflow' ? '/inflow' : '/outflow'; const response = await fetch( `${process.env.EXPO_PUBLIC_API_HOST}${endpoint}`, { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify(formData), } ); if (!response.ok) { throw new Error('Network response was not ok'); } // Reset form after successful submission setFormData({ item: '', quantity: '', unitPrice: '', totalPrice: '', description: '', }); } catch (error) { console.error('Error submitting data:', error); } }; const initializeWebScanner = () => { if (!Html5QrcodeScanner) return; const scanner = new Html5QrcodeScanner( 'qr-reader', { fps: 10, qrbox: { width: 250, height: 250 } }, false ); scanner.render((decodedText: string) => { handleBarCodeScanned({ data: decodedText }); scanner.clear(); }, console.error); scannerRef.current = scanner; }; const handleBarcodeScanned = ({ type, data }) => { console.log(`type of type: ${typeof type}`); console.log(`type of data: ${typeof data}`); setScanned(true); alert(`Bar code with type ${type} and data ${data} has been scanned!`); }; const renderScanner = () => { if (Platform.OS === 'web') { return ( <View style={styles.webScannerContainer}> <div id="qr-reader" style={{ width: '100%', maxWidth: '600px' }} /> </View> ); } return ( <CameraView onBarcodeScanned={scanned ? undefined : handleBarcodeScanned} style={StyleSheet.absoluteFillObject} /> ); }; useEffect(() => { if (showScanner && Platform.OS === 'web') { initializeWebScanner(); } }, [showScanner]); return ( <ScrollView style={styles.container}> <View style={styles.tabButtons}> <Button mode={activeTab === 'inflow' ? 'contained' : 'outlined'} onPress={() => setActiveTab('inflow')} style={styles.tabButton} > Inflow </Button> <Button mode={activeTab === 'outflow' ? 'contained' : 'outlined'} onPress={() => setActiveTab('outflow')} style={styles.tabButton} > Outflow </Button> </View> {activeTab === 'outflow' && ( <Button mode="contained" onPress={requestCameraPermission} style={styles.scanButton} > Scan QR Code </Button> )} <TextInput label="Item" value={formData.item} onChangeText={(text) => setFormData({ ...formData, item: text })} style={styles.input} /> <TextInput label="Quantity" value={formData.quantity} onChangeText={(text) => setFormData({ ...formData, quantity: text })} keyboardType="numeric" style={styles.input} /> <TextInput label="Unit Price" value={formData.unitPrice} onChangeText={(text) => setFormData({ ...formData, unitPrice: text })} keyboardType="numeric" style={styles.input} /> <TextInput label="Total Price" value={formData.totalPrice} onChangeText={(text) => setFormData({ ...formData, totalPrice: text })} keyboardType="numeric" style={styles.input} /> <TextInput label="Description" value={formData.description} onChangeText={(text) => setFormData({ ...formData, description: text })} multiline style={styles.input} /> <Button mode="contained" onPress={handleSubmit} style={styles.submitButton} > Submit </Button> <Portal> <Modal visible={showScanner} onDismiss={() => { setShowScanner(false); if (Platform.OS === 'web' && scannerRef.current) { scannerRef.current.clear(); } }} contentContainerStyle={styles.modalContainer} > {hasPermission === false ? ( <Text>No access to camera</Text> ) : ( renderScanner() )} </Modal> </Portal> </ScrollView> ); } const styles = StyleSheet.create({ container: { flex: 1, padding: 16, }, tabButtons: { flexDirection: 'row', marginBottom: 16, }, tabButton: { flex: 1, marginHorizontal: 4, }, scanButton: { marginBottom: 16, }, input: { marginBottom: 12, }, submitButton: { marginTop: 16, }, modalContainer: { height: '80%', marginHorizontal: 16, backgroundColor: 'white', padding: 16, borderRadius: 8, }, webScannerContainer: { width: '100%', height: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center', }, });